// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: product.sql

package da

import (
	"context"
)

const createProduct = `-- name: CreateProduct :execrows
INSERT INTO product (name)
VALUES (?)
`

func (q *Queries) CreateProduct(ctx context.Context, name string) (int64, error) {
	result, err := q.exec(ctx, q.createProductStmt, createProduct, name)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getProducts = `-- name: GetProducts :many
SELECT id, name, created_at, updated_at
FROM product
ORDER BY updated_at DESC
LIMIT 100
`

func (q *Queries) GetProducts(ctx context.Context) ([]*Product, error) {
	rows, err := q.query(ctx, q.getProductsStmt, getProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
